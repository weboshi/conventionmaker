service: convention-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-west-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: conventions
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: conventions/{id}
          method: get
          cors: true
          authorizer: aws_iam
  get-public:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.mainPublic
    events:
      - http:
          path: public-conventions/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list-public:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.mainPublic
    events:
      - http:
          path: public-conventions
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: conventions
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: conventions/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-basic:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.basic
    events:
      - http:
          path: conventions/updateBasic/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-events:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.events
    events:
      - http:
          path: conventions/updateEvents/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-faq:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.faq
    events:
      - http:
          path: conventions/updateFaq/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-landing:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.landing
    events:
      - http:
          path: conventions/updateLanding/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-schedule:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.schedule
    events:
      - http:
          path: conventions/updateSchedule/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-guests:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.guests
    events:
      - http:
          path: conventions/updateGuests/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-links:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.links
    events:
      - http:
          path: conventions/updateLinks/{id}
          method: put
          cors: true
          authorizer: aws_iam
  update-published:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.publish
    events:
      - http:
          path: conventions/updatePublished/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: conventions/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  delete-public:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.removePublic
    events:
      - http:
          path: public-conventions/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  create-public:
    handler: create.addPublic
    events:
      - http:
          path: public-conventions
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
    # API Gateway Errors
    - ${file(resources/api-gateway-errors.yml)}